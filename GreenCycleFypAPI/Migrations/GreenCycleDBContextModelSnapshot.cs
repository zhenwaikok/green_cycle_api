// <auto-generated />
using System;
using GreenCycleFypAPI.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenCycleFypAPI.Migrations
{
    [DbContext(typeof(GreenCycleDBContext))]
    partial class GreenCycleDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenCycleFypAPI.Models.Awareness", b =>
                {
                    b.Property<int>("AwarenessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AwarenessID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AwarenessID"));

                    b.Property<string>("AwarenessContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AwarenessContent");

                    b.Property<string>("AwarenessImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AwarenessImageURL");

                    b.Property<string>("AwarenessTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("AwarenessTitle");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.HasKey("AwarenessID");

                    b.ToTable("Awareness", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AddedDate");

                    b.Property<string>("BuyerUserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BuyerUserID");

                    b.Property<int?>("ItemListingID")
                        .HasColumnType("int")
                        .HasColumnName("ItemListingID");

                    b.Property<string>("SellerUserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SellerUserID");

                    b.HasKey("CartID");

                    b.HasIndex("ItemListingID");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.CollectorLocations", b =>
                {
                    b.Property<string>("CollectorUserID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CollectorUserID");

                    b.Property<double?>("CollectorLatitude")
                        .HasColumnType("float")
                        .HasColumnName("CollectorLatitude");

                    b.Property<double?>("CollectorLongtitude")
                        .HasColumnType("float")
                        .HasColumnName("CollectorLongtitude");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdated");

                    b.HasKey("CollectorUserID");

                    b.ToTable("CollectorLocations", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.FcmToken", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Token");

                    b.HasKey("UserID");

                    b.ToTable("FcmToken", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.ItemListing", b =>
                {
                    b.Property<int>("ItemListingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemListingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemListingID"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ItemCondition");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ItemDescription");

                    b.Property<string>("ItemImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ItemImageURL");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ItemName");

                    b.Property<double?>("ItemPrice")
                        .HasColumnType("float")
                        .HasColumnName("ItemPrice");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserID");

                    b.HasKey("ItemListingID");

                    b.ToTable("ItemListing", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.PickupRequest", b =>
                {
                    b.Property<string>("PickupRequestID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PickupRequestID");

                    b.Property<string>("CollectionProofImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CollectionProofImageURL");

                    b.Property<string>("CollectorUserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CollectorUserID");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompletedDate");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PickupDate");

                    b.Property<string>("PickupItemCategory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PickupItemCategory");

                    b.Property<string>("PickupItemCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PickupItemCondition");

                    b.Property<string>("PickupItemDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PickupItemDescription");

                    b.Property<string>("PickupItemImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PickupItemImageURL");

                    b.Property<int?>("PickupItemQuantity")
                        .HasColumnType("int")
                        .HasColumnName("PickupItemQuantity");

                    b.Property<double?>("PickupLatitude")
                        .HasColumnType("float")
                        .HasColumnName("PickupLatitude");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PickupLocation");

                    b.Property<double?>("PickupLongtitude")
                        .HasColumnType("float")
                        .HasColumnName("PickupLongtitude");

                    b.Property<string>("PickupRequestStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PickupRequestStatus");

                    b.Property<string>("PickupTimeRange")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PickupTimeRange");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<DateTime?>("RequestedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RequestedDate");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserID");

                    b.HasKey("PickupRequestID");

                    b.ToTable("PickupRequest", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.Points", b =>
                {
                    b.Property<int>("PointID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PointID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<int?>("Point")
                        .HasColumnType("int")
                        .HasColumnName("Point");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserID");

                    b.HasKey("PointID");

                    b.ToTable("Points", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.Purchases", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseID"));

                    b.Property<string>("BuyerUserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BuyerUserID");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeliveredDate");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DeliveryAddress");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit")
                        .HasColumnName("IsDelivered");

                    b.Property<string>("ItemCategory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ItemCategory");

                    b.Property<string>("ItemCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ItemCondition");

                    b.Property<string>("ItemImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ItemImageURL");

                    b.Property<int?>("ItemListingID")
                        .HasColumnType("int")
                        .HasColumnName("ItemListingID");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ItemName");

                    b.Property<double?>("ItemPrice")
                        .HasColumnType("float")
                        .HasColumnName("ItemPrice");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PurchaseDate");

                    b.Property<string>("PurchaseGroupID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PurchaseGroupID");

                    b.Property<string>("SellerUserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SellerUserID");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.HasKey("PurchaseID");

                    b.ToTable("Purchases", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.Reward", b =>
                {
                    b.Property<int>("RewardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RewardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardID"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiryDate");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int?>("PointsRequired")
                        .HasColumnType("int")
                        .HasColumnName("PointsRequired");

                    b.Property<string>("RewardDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("RewardDescription");

                    b.Property<string>("RewardImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RewardImageURL");

                    b.Property<string>("RewardName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("RewardName");

                    b.HasKey("RewardID");

                    b.ToTable("Reward", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.RewardRedemption", b =>
                {
                    b.Property<int>("RewardRedemptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RewardRedemptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardRedemptionID"));

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiryDate");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("IsUsed");

                    b.Property<int?>("PointsRequired")
                        .HasColumnType("int")
                        .HasColumnName("PointsRequired");

                    b.Property<DateTime?>("RedeemedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RedeemedDate");

                    b.Property<string>("RewardDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RewardDescription");

                    b.Property<int?>("RewardID")
                        .HasColumnType("int")
                        .HasColumnName("RewardID");

                    b.Property<string>("RewardImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RewardImageURL");

                    b.Property<string>("RewardName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RewardName");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserID");

                    b.HasKey("RewardRedemptionID");

                    b.ToTable("RewardRedemption", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.Property<string>("AccountRejectMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AccountRejectMessage");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address1");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address2");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ApprovalStatus");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("City");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CompanyName");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<int?>("CurrentPoint")
                        .HasColumnType("int")
                        .HasColumnName("CurrentPoint");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EmailAddress");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("ProfileImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfileImageURL");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("State");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserRole");

                    b.Property<string>("VehiclePlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("VehiclePlateNumber");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("VehicleType");

                    b.HasKey("UserID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("GreenCycleFypAPI.Models.Cart", b =>
                {
                    b.HasOne("GreenCycleFypAPI.Models.ItemListing", "ItemListing")
                        .WithMany()
                        .HasForeignKey("ItemListingID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ItemListing");
                });
#pragma warning restore 612, 618
        }
    }
}
